<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="674"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.15%)</title><rect x="0.0000%" y="325" width="0.1484%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.15%)</title><rect x="0.0000%" y="309" width="0.1484%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (20 samples, 2.97%)</title><rect x="0.7418%" y="197" width="2.9674%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="20"/><text x="0.9918%" y="207.50">ray..</text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (4 samples, 0.59%)</title><rect x="3.7092%" y="197" width="0.5935%" height="15" fill="rgb(248,212,6)" fg:x="25" fg:w="4"/><text x="3.9592%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.15%)</title><rect x="5.0445%" y="181" width="0.1484%" height="15" fill="rgb(208,68,35)" fg:x="34" fg:w="1"/><text x="5.2945%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (44 samples, 6.53%)</title><rect x="5.1929%" y="181" width="6.5282%" height="15" fill="rgb(232,128,0)" fg:x="35" fg:w="44"/><text x="5.4429%" y="191.50">libsystem..</text></g><g><title>raytracer`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="11.7211%" y="181" width="0.1484%" height="15" fill="rgb(207,160,47)" fg:x="79" fg:w="1"/><text x="11.9711%" y="191.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (15 samples, 2.23%)</title><rect x="11.8694%" y="181" width="2.2255%" height="15" fill="rgb(228,23,34)" fg:x="80" fg:w="15"/><text x="12.1194%" y="191.50">r..</text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (22 samples, 3.26%)</title><rect x="14.0950%" y="181" width="3.2641%" height="15" fill="rgb(218,30,26)" fg:x="95" fg:w="22"/><text x="14.3450%" y="191.50">ray..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (5 samples, 0.74%)</title><rect x="17.3591%" y="181" width="0.7418%" height="15" fill="rgb(220,122,19)" fg:x="117" fg:w="5"/><text x="17.6091%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.30%)</title><rect x="18.9911%" y="165" width="0.2967%" height="15" fill="rgb(250,228,42)" fg:x="128" fg:w="2"/><text x="19.2411%" y="175.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (2 samples, 0.30%)</title><rect x="19.2878%" y="165" width="0.2967%" height="15" fill="rgb(240,193,28)" fg:x="130" fg:w="2"/><text x="19.5378%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.15%)</title><rect x="19.5846%" y="165" width="0.1484%" height="15" fill="rgb(216,20,37)" fg:x="132" fg:w="1"/><text x="19.8346%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 4.60%)</title><rect x="19.7329%" y="165" width="4.5994%" height="15" fill="rgb(206,188,39)" fg:x="133" fg:w="31"/><text x="19.9829%" y="175.50">libsy..</text></g><g><title>raytracer`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="24.3323%" y="165" width="0.1484%" height="15" fill="rgb(217,207,13)" fg:x="164" fg:w="1"/><text x="24.5823%" y="175.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (8 samples, 1.19%)</title><rect x="24.4807%" y="165" width="1.1869%" height="15" fill="rgb(231,73,38)" fg:x="165" fg:w="8"/><text x="24.7307%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.15%)</title><rect x="26.8546%" y="149" width="0.1484%" height="15" fill="rgb(225,20,46)" fg:x="181" fg:w="1"/><text x="27.1046%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.15%)</title><rect x="27.0030%" y="149" width="0.1484%" height="15" fill="rgb(210,31,41)" fg:x="182" fg:w="1"/><text x="27.2530%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.30%)</title><rect x="27.1513%" y="149" width="0.2967%" height="15" fill="rgb(221,200,47)" fg:x="183" fg:w="2"/><text x="27.4013%" y="159.50"></text></g><g><title>raytracer`&lt;rand::distributions::uniform::UniformFloat&lt;f64&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (1 samples, 0.15%)</title><rect x="27.4481%" y="149" width="0.1484%" height="15" fill="rgb(226,26,5)" fg:x="185" fg:w="1"/><text x="27.6981%" y="159.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.30%)</title><rect x="27.5964%" y="149" width="0.2967%" height="15" fill="rgb(249,33,26)" fg:x="186" fg:w="2"/><text x="27.8464%" y="159.50"></text></g><g><title>raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9 samples, 1.34%)</title><rect x="27.8932%" y="149" width="1.3353%" height="15" fill="rgb(235,183,28)" fg:x="188" fg:w="9"/><text x="28.1432%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::power_sampler::PowerLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (26 samples, 3.86%)</title><rect x="25.6677%" y="165" width="3.8576%" height="15" fill="rgb(221,5,38)" fg:x="173" fg:w="26"/><text x="25.9177%" y="175.50">rayt..</text></g><g><title>raytracer`rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (2 samples, 0.30%)</title><rect x="29.2285%" y="149" width="0.2967%" height="15" fill="rgb(247,18,42)" fg:x="197" fg:w="2"/><text x="29.4785%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (4 samples, 0.59%)</title><rect x="29.5252%" y="165" width="0.5935%" height="15" fill="rgb(241,131,45)" fg:x="199" fg:w="4"/><text x="29.7752%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.15%)</title><rect x="30.1187%" y="165" width="0.1484%" height="15" fill="rgb(249,31,29)" fg:x="203" fg:w="1"/><text x="30.3687%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.15%)</title><rect x="31.1573%" y="149" width="0.1484%" height="15" fill="rgb(225,111,53)" fg:x="210" fg:w="1"/><text x="31.4073%" y="159.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (3 samples, 0.45%)</title><rect x="31.3056%" y="149" width="0.4451%" height="15" fill="rgb(238,160,17)" fg:x="211" fg:w="3"/><text x="31.5556%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x0000000197c0dbe4 (1 samples, 0.15%)</title><rect x="31.6024%" y="133" width="0.1484%" height="15" fill="rgb(214,148,48)" fg:x="213" fg:w="1"/><text x="31.8524%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 2.97%)</title><rect x="31.7507%" y="149" width="2.9674%" height="15" fill="rgb(232,36,49)" fg:x="214" fg:w="20"/><text x="32.0007%" y="159.50">lib..</text></g><g><title>raytracer`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.15%)</title><rect x="34.7181%" y="149" width="0.1484%" height="15" fill="rgb(209,103,24)" fg:x="234" fg:w="1"/><text x="34.9681%" y="159.50"></text></g><g><title>raytracer`&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.15%)</title><rect x="34.8665%" y="149" width="0.1484%" height="15" fill="rgb(229,88,8)" fg:x="235" fg:w="1"/><text x="35.1165%" y="159.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (6 samples, 0.89%)</title><rect x="35.0148%" y="149" width="0.8902%" height="15" fill="rgb(213,181,19)" fg:x="236" fg:w="6"/><text x="35.2648%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.15%)</title><rect x="36.7953%" y="133" width="0.1484%" height="15" fill="rgb(254,191,54)" fg:x="248" fg:w="1"/><text x="37.0453%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.15%)</title><rect x="36.9436%" y="133" width="0.1484%" height="15" fill="rgb(241,83,37)" fg:x="249" fg:w="1"/><text x="37.1936%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.15%)</title><rect x="37.0920%" y="133" width="0.1484%" height="15" fill="rgb(233,36,39)" fg:x="250" fg:w="1"/><text x="37.3420%" y="143.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.30%)</title><rect x="37.2404%" y="133" width="0.2967%" height="15" fill="rgb(226,3,54)" fg:x="251" fg:w="2"/><text x="37.4904%" y="143.50"></text></g><g><title>raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.59%)</title><rect x="37.5371%" y="133" width="0.5935%" height="15" fill="rgb(245,192,40)" fg:x="253" fg:w="4"/><text x="37.7871%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::power_sampler::PowerLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (16 samples, 2.37%)</title><rect x="35.9050%" y="149" width="2.3739%" height="15" fill="rgb(238,167,29)" fg:x="242" fg:w="16"/><text x="36.1550%" y="159.50">ra..</text></g><g><title>raytracer`rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (1 samples, 0.15%)</title><rect x="38.1306%" y="133" width="0.1484%" height="15" fill="rgb(232,182,51)" fg:x="257" fg:w="1"/><text x="38.3806%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (2 samples, 0.30%)</title><rect x="38.2789%" y="149" width="0.2967%" height="15" fill="rgb(231,60,39)" fg:x="258" fg:w="2"/><text x="38.5289%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x0000000197c0dcfc (1 samples, 0.15%)</title><rect x="40.0593%" y="133" width="0.1484%" height="15" fill="rgb(208,69,12)" fg:x="270" fg:w="1"/><text x="40.3093%" y="143.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (1 samples, 0.15%)</title><rect x="40.2077%" y="133" width="0.1484%" height="15" fill="rgb(235,93,37)" fg:x="271" fg:w="1"/><text x="40.4577%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x0000000197c0dbe4 (1 samples, 0.15%)</title><rect x="40.2077%" y="117" width="0.1484%" height="15" fill="rgb(213,116,39)" fg:x="271" fg:w="1"/><text x="40.4577%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.15%)</title><rect x="40.3561%" y="133" width="0.1484%" height="15" fill="rgb(222,207,29)" fg:x="272" fg:w="1"/><text x="40.6061%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 1.34%)</title><rect x="40.5045%" y="133" width="1.3353%" height="15" fill="rgb(206,96,30)" fg:x="273" fg:w="9"/><text x="40.7545%" y="143.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.45%)</title><rect x="41.8398%" y="133" width="0.4451%" height="15" fill="rgb(218,138,4)" fg:x="282" fg:w="3"/><text x="42.0898%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.15%)</title><rect x="43.1751%" y="117" width="0.1484%" height="15" fill="rgb(250,191,14)" fg:x="291" fg:w="1"/><text x="43.4251%" y="127.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.15%)</title><rect x="43.3234%" y="117" width="0.1484%" height="15" fill="rgb(239,60,40)" fg:x="292" fg:w="1"/><text x="43.5734%" y="127.50"></text></g><g><title>raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.59%)</title><rect x="43.4718%" y="117" width="0.5935%" height="15" fill="rgb(206,27,48)" fg:x="293" fg:w="4"/><text x="43.7218%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::power_sampler::PowerLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (14 samples, 2.08%)</title><rect x="42.2849%" y="133" width="2.0772%" height="15" fill="rgb(225,35,8)" fg:x="285" fg:w="14"/><text x="42.5349%" y="143.50">r..</text></g><g><title>raytracer`rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (2 samples, 0.30%)</title><rect x="44.0653%" y="117" width="0.2967%" height="15" fill="rgb(250,213,24)" fg:x="297" fg:w="2"/><text x="44.3153%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (2 samples, 0.30%)</title><rect x="44.3620%" y="133" width="0.2967%" height="15" fill="rgb(247,123,22)" fg:x="299" fg:w="2"/><text x="44.6120%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.89%)</title><rect x="45.2522%" y="117" width="0.8902%" height="15" fill="rgb(231,138,38)" fg:x="305" fg:w="6"/><text x="45.5022%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.15%)</title><rect x="46.1424%" y="101" width="0.1484%" height="15" fill="rgb(231,145,46)" fg:x="311" fg:w="1"/><text x="46.3924%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::power_sampler::PowerLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (2 samples, 0.30%)</title><rect x="46.1424%" y="117" width="0.2967%" height="15" fill="rgb(251,118,11)" fg:x="311" fg:w="2"/><text x="46.3924%" y="127.50"></text></g><g><title>raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.15%)</title><rect x="46.2908%" y="101" width="0.1484%" height="15" fill="rgb(217,147,25)" fg:x="312" fg:w="1"/><text x="46.5408%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.15%)</title><rect x="46.5875%" y="101" width="0.1484%" height="15" fill="rgb(247,81,37)" fg:x="314" fg:w="1"/><text x="46.8375%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.15%)</title><rect x="46.8843%" y="85" width="0.1484%" height="15" fill="rgb(209,12,38)" fg:x="316" fg:w="1"/><text x="47.1343%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::power_sampler::PowerLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (3 samples, 0.45%)</title><rect x="46.7359%" y="101" width="0.4451%" height="15" fill="rgb(227,1,9)" fg:x="315" fg:w="3"/><text x="46.9859%" y="111.50"></text></g><g><title>raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.15%)</title><rect x="47.0326%" y="85" width="0.1484%" height="15" fill="rgb(248,47,43)" fg:x="317" fg:w="1"/><text x="47.2826%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.15%)</title><rect x="47.1810%" y="85" width="0.1484%" height="15" fill="rgb(221,10,30)" fg:x="318" fg:w="1"/><text x="47.4310%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.45%)</title><rect x="47.3294%" y="85" width="0.4451%" height="15" fill="rgb(210,229,1)" fg:x="319" fg:w="3"/><text x="47.5794%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.15%)</title><rect x="47.7745%" y="85" width="0.1484%" height="15" fill="rgb(222,148,37)" fg:x="322" fg:w="1"/><text x="48.0245%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.15%)</title><rect x="48.0712%" y="69" width="0.1484%" height="15" fill="rgb(234,67,33)" fg:x="324" fg:w="1"/><text x="48.3212%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (1 samples, 0.15%)</title><rect x="48.2196%" y="69" width="0.1484%" height="15" fill="rgb(247,98,35)" fg:x="325" fg:w="1"/><text x="48.4696%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.15%)</title><rect x="48.2196%" y="53" width="0.1484%" height="15" fill="rgb(247,138,52)" fg:x="325" fg:w="1"/><text x="48.4696%" y="63.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (1 samples, 0.15%)</title><rect x="48.3680%" y="69" width="0.1484%" height="15" fill="rgb(213,79,30)" fg:x="326" fg:w="1"/><text x="48.6180%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.15%)</title><rect x="48.3680%" y="53" width="0.1484%" height="15" fill="rgb(246,177,23)" fg:x="326" fg:w="1"/><text x="48.6180%" y="63.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.15%)</title><rect x="48.3680%" y="37" width="0.1484%" height="15" fill="rgb(230,62,27)" fg:x="326" fg:w="1"/><text x="48.6180%" y="47.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (5 samples, 0.74%)</title><rect x="47.9228%" y="85" width="0.7418%" height="15" fill="rgb(216,154,8)" fg:x="323" fg:w="5"/><text x="48.1728%" y="95.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (1 samples, 0.15%)</title><rect x="48.5163%" y="69" width="0.1484%" height="15" fill="rgb(244,35,45)" fg:x="327" fg:w="1"/><text x="48.7663%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.15%)</title><rect x="48.5163%" y="53" width="0.1484%" height="15" fill="rgb(251,115,12)" fg:x="327" fg:w="1"/><text x="48.7663%" y="63.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (11 samples, 1.63%)</title><rect x="47.1810%" y="101" width="1.6320%" height="15" fill="rgb(240,54,50)" fg:x="318" fg:w="11"/><text x="47.4310%" y="111.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (1 samples, 0.15%)</title><rect x="48.6647%" y="85" width="0.1484%" height="15" fill="rgb(233,84,52)" fg:x="328" fg:w="1"/><text x="48.9147%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.15%)</title><rect x="48.6647%" y="69" width="0.1484%" height="15" fill="rgb(207,117,47)" fg:x="328" fg:w="1"/><text x="48.9147%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.15%)</title><rect x="48.6647%" y="53" width="0.1484%" height="15" fill="rgb(249,43,39)" fg:x="328" fg:w="1"/><text x="48.9147%" y="63.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (1 samples, 0.15%)</title><rect x="48.8131%" y="101" width="0.1484%" height="15" fill="rgb(209,38,44)" fg:x="329" fg:w="1"/><text x="49.0631%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (20 samples, 2.97%)</title><rect x="46.4392%" y="117" width="2.9674%" height="15" fill="rgb(236,212,23)" fg:x="313" fg:w="20"/><text x="46.6892%" y="127.50">ray..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (3 samples, 0.45%)</title><rect x="48.9614%" y="101" width="0.4451%" height="15" fill="rgb(242,79,21)" fg:x="330" fg:w="3"/><text x="49.2114%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (3 samples, 0.45%)</title><rect x="48.9614%" y="85" width="0.4451%" height="15" fill="rgb(211,96,35)" fg:x="330" fg:w="3"/><text x="49.2114%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.15%)</title><rect x="49.2582%" y="69" width="0.1484%" height="15" fill="rgb(253,215,40)" fg:x="332" fg:w="1"/><text x="49.5082%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.15%)</title><rect x="50.4451%" y="85" width="0.1484%" height="15" fill="rgb(211,81,21)" fg:x="340" fg:w="1"/><text x="50.6951%" y="95.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (10 samples, 1.48%)</title><rect x="49.4065%" y="117" width="1.4837%" height="15" fill="rgb(208,190,38)" fg:x="333" fg:w="10"/><text x="49.6565%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (8 samples, 1.19%)</title><rect x="49.7033%" y="101" width="1.1869%" height="15" fill="rgb(235,213,38)" fg:x="335" fg:w="8"/><text x="49.9533%" y="111.50"></text></g><g><title>raytracer`raytracer_lib::object::intersection::get_min_intersection (2 samples, 0.30%)</title><rect x="50.5935%" y="85" width="0.2967%" height="15" fill="rgb(237,122,38)" fg:x="341" fg:w="2"/><text x="50.8435%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.15%)</title><rect x="51.4837%" y="85" width="0.1484%" height="15" fill="rgb(244,218,35)" fg:x="347" fg:w="1"/><text x="51.7337%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (49 samples, 7.27%)</title><rect x="44.6588%" y="133" width="7.2700%" height="15" fill="rgb(240,68,47)" fg:x="301" fg:w="49"/><text x="44.9088%" y="143.50">raytracer`..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (7 samples, 1.04%)</title><rect x="50.8902%" y="117" width="1.0386%" height="15" fill="rgb(210,16,53)" fg:x="343" fg:w="7"/><text x="51.1402%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (7 samples, 1.04%)</title><rect x="50.8902%" y="101" width="1.0386%" height="15" fill="rgb(235,124,12)" fg:x="343" fg:w="7"/><text x="51.1402%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (2 samples, 0.30%)</title><rect x="51.6320%" y="85" width="0.2967%" height="15" fill="rgb(224,169,11)" fg:x="348" fg:w="2"/><text x="51.8820%" y="95.50"></text></g><g><title>raytracer`core::ptr::drop_in_place&lt;core::option::Option&lt;raytracer_lib::object::intersection::MaterialInformation&gt;&gt; (1 samples, 0.15%)</title><rect x="51.9288%" y="133" width="0.1484%" height="15" fill="rgb(250,166,2)" fg:x="350" fg:w="1"/><text x="52.1788%" y="143.50"></text></g><g><title>raytracer`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.15%)</title><rect x="52.0772%" y="133" width="0.1484%" height="15" fill="rgb(242,216,29)" fg:x="351" fg:w="1"/><text x="52.3272%" y="143.50"></text></g><g><title>raytracer`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.15%)</title><rect x="52.0772%" y="117" width="0.1484%" height="15" fill="rgb(230,116,27)" fg:x="351" fg:w="1"/><text x="52.3272%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (1 samples, 0.15%)</title><rect x="52.0772%" y="101" width="0.1484%" height="15" fill="rgb(228,99,48)" fg:x="351" fg:w="1"/><text x="52.3272%" y="111.50"></text></g><g><title>raytracer`raytracer_lib::light::area_light::AreaLight::l (1 samples, 0.15%)</title><rect x="52.2255%" y="133" width="0.1484%" height="15" fill="rgb(253,11,6)" fg:x="352" fg:w="1"/><text x="52.4755%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.15%)</title><rect x="52.9674%" y="117" width="0.1484%" height="15" fill="rgb(247,143,39)" fg:x="357" fg:w="1"/><text x="53.2174%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.45%)</title><rect x="53.2641%" y="101" width="0.4451%" height="15" fill="rgb(236,97,10)" fg:x="359" fg:w="3"/><text x="53.5141%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (10 samples, 1.48%)</title><rect x="53.7092%" y="101" width="1.4837%" height="15" fill="rgb(233,208,19)" fg:x="362" fg:w="10"/><text x="53.9592%" y="111.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (21 samples, 3.12%)</title><rect x="52.3739%" y="133" width="3.1157%" height="15" fill="rgb(216,164,2)" fg:x="353" fg:w="21"/><text x="52.6239%" y="143.50">ray..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (16 samples, 2.37%)</title><rect x="53.1157%" y="117" width="2.3739%" height="15" fill="rgb(220,129,5)" fg:x="358" fg:w="16"/><text x="53.3657%" y="127.50">ra..</text></g><g><title>raytracer`raytracer_lib::object::intersection::get_min_intersection (2 samples, 0.30%)</title><rect x="55.1929%" y="101" width="0.2967%" height="15" fill="rgb(242,17,10)" fg:x="372" fg:w="2"/><text x="55.4429%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.45%)</title><rect x="56.2315%" y="101" width="0.4451%" height="15" fill="rgb(242,107,0)" fg:x="379" fg:w="3"/><text x="56.4815%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (10 samples, 1.48%)</title><rect x="56.6766%" y="101" width="1.4837%" height="15" fill="rgb(251,28,31)" fg:x="382" fg:w="10"/><text x="56.9266%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (134 samples, 19.88%)</title><rect x="38.5757%" y="149" width="19.8813%" height="15" fill="rgb(233,223,10)" fg:x="260" fg:w="134"/><text x="38.8257%" y="159.50">raytracer`&lt;raytracer_lib::shade..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (20 samples, 2.97%)</title><rect x="55.4896%" y="133" width="2.9674%" height="15" fill="rgb(215,21,27)" fg:x="374" fg:w="20"/><text x="55.7396%" y="143.50">ray..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (20 samples, 2.97%)</title><rect x="55.4896%" y="117" width="2.9674%" height="15" fill="rgb(232,23,21)" fg:x="374" fg:w="20"/><text x="55.7396%" y="127.50">ray..</text></g><g><title>raytracer`raytracer_lib::object::intersection::get_min_intersection (2 samples, 0.30%)</title><rect x="58.1602%" y="101" width="0.2967%" height="15" fill="rgb(244,5,23)" fg:x="392" fg:w="2"/><text x="58.4102%" y="111.50"></text></g><g><title>raytracer`core::ptr::drop_in_place&lt;raytracer_lib::object::intersection::Intersection&gt; (2 samples, 0.30%)</title><rect x="58.4570%" y="149" width="0.2967%" height="15" fill="rgb(226,81,46)" fg:x="394" fg:w="2"/><text x="58.7070%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.30%)</title><rect x="58.4570%" y="133" width="0.2967%" height="15" fill="rgb(247,70,30)" fg:x="394" fg:w="2"/><text x="58.7070%" y="143.50"></text></g><g><title>raytracer`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.15%)</title><rect x="58.7537%" y="149" width="0.1484%" height="15" fill="rgb(212,68,19)" fg:x="396" fg:w="1"/><text x="59.0037%" y="159.50"></text></g><g><title>raytracer`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.15%)</title><rect x="58.7537%" y="133" width="0.1484%" height="15" fill="rgb(240,187,13)" fg:x="396" fg:w="1"/><text x="59.0037%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (1 samples, 0.15%)</title><rect x="58.7537%" y="117" width="0.1484%" height="15" fill="rgb(223,113,26)" fg:x="396" fg:w="1"/><text x="59.0037%" y="127.50"></text></g><g><title>raytracer`raytracer_lib::light::light_sampler::LightSampler::sample_ambient_lights (1 samples, 0.15%)</title><rect x="58.9021%" y="149" width="0.1484%" height="15" fill="rgb(206,192,2)" fg:x="397" fg:w="1"/><text x="59.1521%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.30%)</title><rect x="59.9407%" y="133" width="0.2967%" height="15" fill="rgb(241,108,4)" fg:x="404" fg:w="2"/><text x="60.1907%" y="143.50"></text></g><g><title>raytracer`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="60.2374%" y="133" width="0.1484%" height="15" fill="rgb(247,173,49)" fg:x="406" fg:w="1"/><text x="60.4874%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.74%)</title><rect x="62.1662%" y="117" width="0.7418%" height="15" fill="rgb(224,114,35)" fg:x="419" fg:w="5"/><text x="62.4162%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (21 samples, 3.12%)</title><rect x="62.9080%" y="117" width="3.1157%" height="15" fill="rgb(245,159,27)" fg:x="424" fg:w="21"/><text x="63.1580%" y="127.50">ray..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (40 samples, 5.93%)</title><rect x="60.3858%" y="133" width="5.9347%" height="15" fill="rgb(245,172,44)" fg:x="407" fg:w="40"/><text x="60.6358%" y="143.50">raytrace..</text></g><g><title>raytracer`raytracer_lib::object::intersection::get_min_intersection (2 samples, 0.30%)</title><rect x="66.0237%" y="117" width="0.2967%" height="15" fill="rgb(236,23,11)" fg:x="445" fg:w="2"/><text x="66.2737%" y="127.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (50 samples, 7.42%)</title><rect x="59.0504%" y="149" width="7.4184%" height="15" fill="rgb(205,117,38)" fg:x="398" fg:w="50"/><text x="59.3004%" y="159.50">raytracer`..</text></g><g><title>raytracer`DYLD-STUB$$memcpy (1 samples, 0.15%)</title><rect x="66.3205%" y="133" width="0.1484%" height="15" fill="rgb(237,72,25)" fg:x="447" fg:w="1"/><text x="66.5705%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.45%)</title><rect x="66.4688%" y="133" width="0.4451%" height="15" fill="rgb(244,70,9)" fg:x="448" fg:w="3"/><text x="66.7188%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.59%)</title><rect x="67.3591%" y="117" width="0.5935%" height="15" fill="rgb(217,125,39)" fg:x="454" fg:w="4"/><text x="67.6091%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (21 samples, 3.12%)</title><rect x="66.9139%" y="133" width="3.1157%" height="15" fill="rgb(235,36,10)" fg:x="451" fg:w="21"/><text x="67.1639%" y="143.50">ray..</text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (14 samples, 2.08%)</title><rect x="67.9525%" y="117" width="2.0772%" height="15" fill="rgb(251,123,47)" fg:x="458" fg:w="14"/><text x="68.2025%" y="127.50">r..</text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (269 samples, 39.91%)</title><rect x="30.2671%" y="165" width="39.9110%" height="15" fill="rgb(221,13,13)" fg:x="204" fg:w="269"/><text x="30.5171%" y="175.50">raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::Path..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (25 samples, 3.71%)</title><rect x="66.4688%" y="149" width="3.7092%" height="15" fill="rgb(238,131,9)" fg:x="448" fg:w="25"/><text x="66.7188%" y="159.50">rayt..</text></g><g><title>raytracer`DYLD-STUB$$memcpy (1 samples, 0.15%)</title><rect x="70.0297%" y="133" width="0.1484%" height="15" fill="rgb(211,50,8)" fg:x="472" fg:w="1"/><text x="70.2797%" y="143.50"></text></g><g><title>raytracer`DYLD-STUB$$memcpy (2 samples, 0.30%)</title><rect x="70.1780%" y="165" width="0.2967%" height="15" fill="rgb(245,182,24)" fg:x="473" fg:w="2"/><text x="70.4280%" y="175.50"></text></g><g><title>raytracer`core::ptr::drop_in_place&lt;core::option::Option&lt;raytracer_lib::object::intersection::MaterialInformation&gt;&gt; (1 samples, 0.15%)</title><rect x="70.4748%" y="165" width="0.1484%" height="15" fill="rgb(242,14,37)" fg:x="475" fg:w="1"/><text x="70.7248%" y="175.50"></text></g><g><title>raytracer`core::ptr::drop_in_place&lt;raytracer_lib::object::intersection::Intersection&gt; (1 samples, 0.15%)</title><rect x="70.6231%" y="165" width="0.1484%" height="15" fill="rgb(246,228,12)" fg:x="476" fg:w="1"/><text x="70.8731%" y="175.50"></text></g><g><title>raytracer`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.15%)</title><rect x="70.7715%" y="165" width="0.1484%" height="15" fill="rgb(213,55,15)" fg:x="477" fg:w="1"/><text x="71.0215%" y="175.50"></text></g><g><title>raytracer`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.15%)</title><rect x="70.7715%" y="149" width="0.1484%" height="15" fill="rgb(209,9,3)" fg:x="477" fg:w="1"/><text x="71.0215%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (1 samples, 0.15%)</title><rect x="70.7715%" y="133" width="0.1484%" height="15" fill="rgb(230,59,30)" fg:x="477" fg:w="1"/><text x="71.0215%" y="143.50"></text></g><g><title>raytracer`raytracer_lib::light::area_light::AreaLight::l (1 samples, 0.15%)</title><rect x="70.9199%" y="165" width="0.1484%" height="15" fill="rgb(209,121,21)" fg:x="478" fg:w="1"/><text x="71.1699%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.15%)</title><rect x="72.5519%" y="149" width="0.1484%" height="15" fill="rgb(220,109,13)" fg:x="489" fg:w="1"/><text x="72.8019%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.15%)</title><rect x="72.7003%" y="149" width="0.1484%" height="15" fill="rgb(232,18,1)" fg:x="490" fg:w="1"/><text x="72.9503%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.30%)</title><rect x="72.8487%" y="149" width="0.2967%" height="15" fill="rgb(215,41,42)" fg:x="491" fg:w="2"/><text x="73.0987%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.89%)</title><rect x="75.3709%" y="133" width="0.8902%" height="15" fill="rgb(224,123,36)" fg:x="508" fg:w="6"/><text x="75.6209%" y="143.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (60 samples, 8.90%)</title><rect x="71.0682%" y="165" width="8.9021%" height="15" fill="rgb(240,125,3)" fg:x="479" fg:w="60"/><text x="71.3182%" y="175.50">raytracer`ray..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (46 samples, 6.82%)</title><rect x="73.1454%" y="149" width="6.8249%" height="15" fill="rgb(205,98,50)" fg:x="493" fg:w="46"/><text x="73.3954%" y="159.50">raytracer..</text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (25 samples, 3.71%)</title><rect x="76.2611%" y="133" width="3.7092%" height="15" fill="rgb(205,185,37)" fg:x="514" fg:w="25"/><text x="76.5111%" y="143.50">rayt..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.59%)</title><rect x="80.2671%" y="149" width="0.5935%" height="15" fill="rgb(238,207,15)" fg:x="541" fg:w="4"/><text x="80.5171%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.74%)</title><rect x="81.6024%" y="133" width="0.7418%" height="15" fill="rgb(213,199,42)" fg:x="550" fg:w="5"/><text x="81.8524%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (452 samples, 67.06%)</title><rect x="18.1009%" y="181" width="67.0623%" height="15" fill="rgb(235,201,11)" fg:x="122" fg:w="452"/><text x="18.3509%" y="191.50">raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (35 samples, 5.19%)</title><rect x="79.9703%" y="165" width="5.1929%" height="15" fill="rgb(207,46,11)" fg:x="539" fg:w="35"/><text x="80.2203%" y="175.50">raytra..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (29 samples, 4.30%)</title><rect x="80.8605%" y="149" width="4.3027%" height="15" fill="rgb(241,35,35)" fg:x="545" fg:w="29"/><text x="81.1105%" y="159.50">raytr..</text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (19 samples, 2.82%)</title><rect x="82.3442%" y="133" width="2.8190%" height="15" fill="rgb(243,32,47)" fg:x="555" fg:w="19"/><text x="82.5942%" y="143.50">ra..</text></g><g><title>raytracer`DYLD-STUB$$memcpy (3 samples, 0.45%)</title><rect x="85.1632%" y="181" width="0.4451%" height="15" fill="rgb(247,202,23)" fg:x="574" fg:w="3"/><text x="85.4132%" y="191.50"></text></g><g><title>raytracer`core::ptr::drop_in_place&lt;raytracer_lib::object::intersection::Intersection&gt; (2 samples, 0.30%)</title><rect x="85.6083%" y="181" width="0.2967%" height="15" fill="rgb(219,102,11)" fg:x="577" fg:w="2"/><text x="85.8583%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.30%)</title><rect x="85.6083%" y="165" width="0.2967%" height="15" fill="rgb(243,110,44)" fg:x="577" fg:w="2"/><text x="85.8583%" y="175.50"></text></g><g><title>raytracer`raytracer_lib::light::area_light::AreaLight::l (1 samples, 0.15%)</title><rect x="85.9050%" y="181" width="0.1484%" height="15" fill="rgb(222,74,54)" fg:x="579" fg:w="1"/><text x="86.1550%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.15%)</title><rect x="90.2077%" y="165" width="0.1484%" height="15" fill="rgb(216,99,12)" fg:x="608" fg:w="1"/><text x="90.4577%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.15%)</title><rect x="90.3561%" y="165" width="0.1484%" height="15" fill="rgb(226,22,26)" fg:x="609" fg:w="1"/><text x="90.6061%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.15%)</title><rect x="90.5045%" y="165" width="0.1484%" height="15" fill="rgb(217,163,10)" fg:x="610" fg:w="1"/><text x="90.7545%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 1.48%)</title><rect x="95.5490%" y="149" width="1.4837%" height="15" fill="rgb(213,25,53)" fg:x="644" fg:w="10"/><text x="95.7990%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (14 samples, 2.08%)</title><rect x="97.0326%" y="149" width="2.0772%" height="15" fill="rgb(252,105,26)" fg:x="654" fg:w="14"/><text x="97.2826%" y="159.50">r..</text></g><g><title>raytracer`DYLD-STUB$$memcpy (1 samples, 0.15%)</title><rect x="99.1098%" y="149" width="0.1484%" height="15" fill="rgb(220,39,43)" fg:x="668" fg:w="1"/><text x="99.3598%" y="159.50"></text></g><g><title>raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (642 samples, 95.25%)</title><rect x="4.3027%" y="197" width="95.2522%" height="15" fill="rgb(229,68,48)" fg:x="29" fg:w="642"/><text x="4.5527%" y="207.50">raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (91 samples, 13.50%)</title><rect x="86.0534%" y="181" width="13.5015%" height="15" fill="rgb(252,8,32)" fg:x="580" fg:w="91"/><text x="86.3034%" y="191.50">raytracer`raytracer_..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (60 samples, 8.90%)</title><rect x="90.6528%" y="165" width="8.9021%" height="15" fill="rgb(223,20,43)" fg:x="611" fg:w="60"/><text x="90.9028%" y="175.50">raytracer`&lt;ra..</text></g><g><title>raytracer`raytracer_lib::object::intersection::get_min_intersection (2 samples, 0.30%)</title><rect x="99.2582%" y="149" width="0.2967%" height="15" fill="rgb(229,81,49)" fg:x="669" fg:w="2"/><text x="99.5082%" y="159.50"></text></g><g><title>raytracer`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (669 samples, 99.26%)</title><rect x="0.4451%" y="213" width="99.2582%" height="15" fill="rgb(236,28,36)" fg:x="3" fg:w="669"/><text x="0.6951%" y="223.50">raytracer`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (1 samples, 0.15%)</title><rect x="99.5549%" y="197" width="0.1484%" height="15" fill="rgb(249,185,26)" fg:x="671" fg:w="1"/><text x="99.8049%" y="207.50"></text></g><g><title>raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.15%)</title><rect x="99.7033%" y="213" width="0.1484%" height="15" fill="rgb(249,174,33)" fg:x="672" fg:w="1"/><text x="99.9533%" y="223.50"></text></g><g><title>all (674 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="674"/><text x="0.2500%" y="367.50"></text></g><g><title>dyld`start (674 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="674"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>raytracer`main (673 samples, 99.85%)</title><rect x="0.1484%" y="325" width="99.8516%" height="15" fill="rgb(250,127,30)" fg:x="1" fg:w="673"/><text x="0.3984%" y="335.50">raytracer`main</text></g><g><title>raytracer`std::rt::lang_start_internal (673 samples, 99.85%)</title><rect x="0.1484%" y="309" width="99.8516%" height="15" fill="rgb(230,49,44)" fg:x="1" fg:w="673"/><text x="0.3984%" y="319.50">raytracer`std::rt::lang_start_internal</text></g><g><title>raytracer`std::panicking::try (673 samples, 99.85%)</title><rect x="0.1484%" y="293" width="99.8516%" height="15" fill="rgb(229,67,23)" fg:x="1" fg:w="673"/><text x="0.3984%" y="303.50">raytracer`std::panicking::try</text></g><g><title>raytracer`std::rt::lang_start::_{{closure}} (673 samples, 99.85%)</title><rect x="0.1484%" y="277" width="99.8516%" height="15" fill="rgb(249,83,47)" fg:x="1" fg:w="673"/><text x="0.3984%" y="287.50">raytracer`std::rt::lang_start::_{{closure}}</text></g><g><title>raytracer`std::sys_common::backtrace::__rust_begin_short_backtrace (673 samples, 99.85%)</title><rect x="0.1484%" y="261" width="99.8516%" height="15" fill="rgb(215,43,3)" fg:x="1" fg:w="673"/><text x="0.3984%" y="271.50">raytracer`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>raytracer`raytracer::main (673 samples, 99.85%)</title><rect x="0.1484%" y="245" width="99.8516%" height="15" fill="rgb(238,154,13)" fg:x="1" fg:w="673"/><text x="0.3984%" y="255.50">raytracer`raytracer::main</text></g><g><title>raytracer`raytracer_lib::raytracer::RayTracer::render (673 samples, 99.85%)</title><rect x="0.1484%" y="229" width="99.8516%" height="15" fill="rgb(219,56,2)" fg:x="1" fg:w="673"/><text x="0.3984%" y="239.50">raytracer`raytracer_lib::raytracer::RayTracer::render</text></g><g><title>raytracer`std::fs::OpenOptions::_open (1 samples, 0.15%)</title><rect x="99.8516%" y="213" width="0.1484%" height="15" fill="rgb(233,0,4)" fg:x="673" fg:w="1"/><text x="100.1016%" y="223.50"></text></g><g><title>raytracer`std::sys::pal::unix::fs::File::open_c (1 samples, 0.15%)</title><rect x="99.8516%" y="197" width="0.1484%" height="15" fill="rgb(235,30,7)" fg:x="673" fg:w="1"/><text x="100.1016%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.15%)</title><rect x="99.8516%" y="181" width="0.1484%" height="15" fill="rgb(250,79,13)" fg:x="673" fg:w="1"/><text x="100.1016%" y="191.50"></text></g></svg></svg>