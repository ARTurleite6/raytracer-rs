<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="625"><g><title>libsystem_kernel.dylib`write (1 samples, 0.16%)</title><rect x="0.4800%" y="261" width="0.1600%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="1"/><text x="0.7300%" y="271.50"></text></g><g><title>raytracer`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="1.4400%" y="213" width="0.1600%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="1"/><text x="1.6900%" y="223.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (23 samples, 3.68%)</title><rect x="1.6000%" y="213" width="3.6800%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="23"/><text x="1.8500%" y="223.50">rayt..</text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (1 samples, 0.16%)</title><rect x="5.2800%" y="213" width="0.1600%" height="15" fill="rgb(248,212,6)" fg:x="33" fg:w="1"/><text x="5.5300%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.48%)</title><rect x="6.2400%" y="197" width="0.4800%" height="15" fill="rgb(208,68,35)" fg:x="39" fg:w="3"/><text x="6.4900%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (53 samples, 8.48%)</title><rect x="6.7200%" y="197" width="8.4800%" height="15" fill="rgb(232,128,0)" fg:x="42" fg:w="53"/><text x="6.9700%" y="207.50">libsystem_pl..</text></g><g><title>raytracer`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="15.2000%" y="197" width="0.1600%" height="15" fill="rgb(207,160,47)" fg:x="95" fg:w="1"/><text x="15.4500%" y="207.50"></text></g><g><title>raytracer`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="15.3600%" y="197" width="0.1600%" height="15" fill="rgb(228,23,34)" fg:x="96" fg:w="1"/><text x="15.6100%" y="207.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (25 samples, 4.00%)</title><rect x="15.5200%" y="197" width="4.0000%" height="15" fill="rgb(218,30,26)" fg:x="97" fg:w="25"/><text x="15.7700%" y="207.50">rayt..</text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (19 samples, 3.04%)</title><rect x="19.5200%" y="197" width="3.0400%" height="15" fill="rgb(220,122,19)" fg:x="122" fg:w="19"/><text x="19.7700%" y="207.50">ray..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (4 samples, 0.64%)</title><rect x="22.5600%" y="197" width="0.6400%" height="15" fill="rgb(250,228,42)" fg:x="141" fg:w="4"/><text x="22.8100%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.32%)</title><rect x="25.2800%" y="181" width="0.3200%" height="15" fill="rgb(240,193,28)" fg:x="158" fg:w="2"/><text x="25.5300%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x0000000193d8dbe4 (1 samples, 0.16%)</title><rect x="25.6000%" y="181" width="0.1600%" height="15" fill="rgb(216,20,37)" fg:x="160" fg:w="1"/><text x="25.8500%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x0000000193d8dcfc (1 samples, 0.16%)</title><rect x="25.7600%" y="181" width="0.1600%" height="15" fill="rgb(206,188,39)" fg:x="161" fg:w="1"/><text x="26.0100%" y="191.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (4 samples, 0.64%)</title><rect x="25.9200%" y="181" width="0.6400%" height="15" fill="rgb(217,207,13)" fg:x="162" fg:w="4"/><text x="26.1700%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x0000000193d8dbe4 (1 samples, 0.16%)</title><rect x="26.4000%" y="165" width="0.1600%" height="15" fill="rgb(231,73,38)" fg:x="165" fg:w="1"/><text x="26.6500%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 3.84%)</title><rect x="26.5600%" y="181" width="3.8400%" height="15" fill="rgb(225,20,46)" fg:x="166" fg:w="24"/><text x="26.8100%" y="191.50">libs..</text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (11 samples, 1.76%)</title><rect x="30.4000%" y="181" width="1.7600%" height="15" fill="rgb(210,31,41)" fg:x="190" fg:w="11"/><text x="30.6500%" y="191.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.16%)</title><rect x="32.4800%" y="165" width="0.1600%" height="15" fill="rgb(221,200,47)" fg:x="203" fg:w="1"/><text x="32.7300%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::UniformLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (4 samples, 0.64%)</title><rect x="32.1600%" y="181" width="0.6400%" height="15" fill="rgb(226,26,5)" fg:x="201" fg:w="4"/><text x="32.4100%" y="191.50"></text></g><g><title>raytracer`rand::seq::IteratorRandom::choose (1 samples, 0.16%)</title><rect x="32.6400%" y="165" width="0.1600%" height="15" fill="rgb(249,33,26)" fg:x="204" fg:w="1"/><text x="32.8900%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (4 samples, 0.64%)</title><rect x="32.8000%" y="181" width="0.6400%" height="15" fill="rgb(235,183,28)" fg:x="205" fg:w="4"/><text x="33.0500%" y="191.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.16%)</title><rect x="33.4400%" y="181" width="0.1600%" height="15" fill="rgb(221,5,38)" fg:x="209" fg:w="1"/><text x="33.6900%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.32%)</title><rect x="34.8800%" y="165" width="0.3200%" height="15" fill="rgb(247,18,42)" fg:x="218" fg:w="2"/><text x="35.1300%" y="175.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (1 samples, 0.16%)</title><rect x="35.2000%" y="165" width="0.1600%" height="15" fill="rgb(241,131,45)" fg:x="220" fg:w="1"/><text x="35.4500%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 1.60%)</title><rect x="35.3600%" y="165" width="1.6000%" height="15" fill="rgb(249,31,29)" fg:x="221" fg:w="10"/><text x="35.6100%" y="175.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (8 samples, 1.28%)</title><rect x="36.9600%" y="165" width="1.2800%" height="15" fill="rgb(225,111,53)" fg:x="231" fg:w="8"/><text x="37.2100%" y="175.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.32%)</title><rect x="38.4000%" y="149" width="0.3200%" height="15" fill="rgb(238,160,17)" fg:x="240" fg:w="2"/><text x="38.6500%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::UniformLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (5 samples, 0.80%)</title><rect x="38.2400%" y="165" width="0.8000%" height="15" fill="rgb(214,148,48)" fg:x="239" fg:w="5"/><text x="38.4900%" y="175.50"></text></g><g><title>raytracer`rand::seq::IteratorRandom::choose (2 samples, 0.32%)</title><rect x="38.7200%" y="149" width="0.3200%" height="15" fill="rgb(232,36,49)" fg:x="242" fg:w="2"/><text x="38.9700%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (4 samples, 0.64%)</title><rect x="39.0400%" y="165" width="0.6400%" height="15" fill="rgb(209,103,24)" fg:x="244" fg:w="4"/><text x="39.2900%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (3 samples, 0.48%)</title><rect x="39.6800%" y="165" width="0.4800%" height="15" fill="rgb(229,88,8)" fg:x="248" fg:w="3"/><text x="39.9300%" y="175.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (2 samples, 0.32%)</title><rect x="41.1200%" y="149" width="0.3200%" height="15" fill="rgb(213,181,19)" fg:x="257" fg:w="2"/><text x="41.3700%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.96%)</title><rect x="41.4400%" y="149" width="0.9600%" height="15" fill="rgb(254,191,54)" fg:x="259" fg:w="6"/><text x="41.6900%" y="159.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.32%)</title><rect x="42.4000%" y="149" width="0.3200%" height="15" fill="rgb(241,83,37)" fg:x="265" fg:w="2"/><text x="42.6500%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.16%)</title><rect x="43.0400%" y="133" width="0.1600%" height="15" fill="rgb(233,36,39)" fg:x="269" fg:w="1"/><text x="43.2900%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::UniformLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (4 samples, 0.64%)</title><rect x="42.7200%" y="149" width="0.6400%" height="15" fill="rgb(226,3,54)" fg:x="267" fg:w="4"/><text x="42.9700%" y="159.50"></text></g><g><title>raytracer`rand::seq::IteratorRandom::choose (1 samples, 0.16%)</title><rect x="43.2000%" y="133" width="0.1600%" height="15" fill="rgb(245,192,40)" fg:x="270" fg:w="1"/><text x="43.4500%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.16%)</title><rect x="43.3600%" y="149" width="0.1600%" height="15" fill="rgb(238,167,29)" fg:x="271" fg:w="1"/><text x="43.6100%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.16%)</title><rect x="43.5200%" y="149" width="0.1600%" height="15" fill="rgb(232,182,51)" fg:x="272" fg:w="1"/><text x="43.7700%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.16%)</title><rect x="44.6400%" y="133" width="0.1600%" height="15" fill="rgb(231,60,39)" fg:x="279" fg:w="1"/><text x="44.8900%" y="143.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (1 samples, 0.16%)</title><rect x="44.8000%" y="133" width="0.1600%" height="15" fill="rgb(208,69,12)" fg:x="280" fg:w="1"/><text x="45.0500%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.64%)</title><rect x="44.9600%" y="133" width="0.6400%" height="15" fill="rgb(235,93,37)" fg:x="281" fg:w="4"/><text x="45.2100%" y="143.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.16%)</title><rect x="45.6000%" y="133" width="0.1600%" height="15" fill="rgb(213,116,39)" fg:x="285" fg:w="1"/><text x="45.8500%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.16%)</title><rect x="45.9200%" y="117" width="0.1600%" height="15" fill="rgb(222,207,29)" fg:x="287" fg:w="1"/><text x="46.1700%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::UniformLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (3 samples, 0.48%)</title><rect x="45.7600%" y="133" width="0.4800%" height="15" fill="rgb(206,96,30)" fg:x="286" fg:w="3"/><text x="46.0100%" y="143.50"></text></g><g><title>raytracer`rand::seq::IteratorRandom::choose (1 samples, 0.16%)</title><rect x="46.0800%" y="117" width="0.1600%" height="15" fill="rgb(218,138,4)" fg:x="288" fg:w="1"/><text x="46.3300%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.16%)</title><rect x="46.2400%" y="133" width="0.1600%" height="15" fill="rgb(250,191,14)" fg:x="289" fg:w="1"/><text x="46.4900%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.16%)</title><rect x="46.5600%" y="117" width="0.1600%" height="15" fill="rgb(239,60,40)" fg:x="291" fg:w="1"/><text x="46.8100%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.16%)</title><rect x="46.7200%" y="101" width="0.1600%" height="15" fill="rgb(206,27,48)" fg:x="292" fg:w="1"/><text x="46.9700%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::light::light_sampler::UniformLightSampler as raytracer_lib::light::light_sampler::LightSampler&gt;::sample (1 samples, 0.16%)</title><rect x="46.8800%" y="101" width="0.1600%" height="15" fill="rgb(225,35,8)" fg:x="293" fg:w="1"/><text x="47.1300%" y="111.50"></text></g><g><title>raytracer`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.16%)</title><rect x="46.8800%" y="85" width="0.1600%" height="15" fill="rgb(250,213,24)" fg:x="293" fg:w="1"/><text x="47.1300%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (1 samples, 0.16%)</title><rect x="47.0400%" y="85" width="0.1600%" height="15" fill="rgb(247,123,22)" fg:x="294" fg:w="1"/><text x="47.2900%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (1 samples, 0.16%)</title><rect x="47.0400%" y="69" width="0.1600%" height="15" fill="rgb(231,138,38)" fg:x="294" fg:w="1"/><text x="47.2900%" y="79.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (1 samples, 0.16%)</title><rect x="47.0400%" y="53" width="0.1600%" height="15" fill="rgb(231,145,46)" fg:x="294" fg:w="1"/><text x="47.2900%" y="63.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.16%)</title><rect x="47.0400%" y="37" width="0.1600%" height="15" fill="rgb(251,118,11)" fg:x="294" fg:w="1"/><text x="47.2900%" y="47.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (1 samples, 0.16%)</title><rect x="47.2000%" y="85" width="0.1600%" height="15" fill="rgb(217,147,25)" fg:x="295" fg:w="1"/><text x="47.4500%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.16%)</title><rect x="47.2000%" y="69" width="0.1600%" height="15" fill="rgb(247,81,37)" fg:x="295" fg:w="1"/><text x="47.4500%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (3 samples, 0.48%)</title><rect x="47.0400%" y="101" width="0.4800%" height="15" fill="rgb(209,12,38)" fg:x="294" fg:w="3"/><text x="47.2900%" y="111.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (1 samples, 0.16%)</title><rect x="47.3600%" y="85" width="0.1600%" height="15" fill="rgb(227,1,9)" fg:x="296" fg:w="1"/><text x="47.6100%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.16%)</title><rect x="47.3600%" y="69" width="0.1600%" height="15" fill="rgb(248,47,43)" fg:x="296" fg:w="1"/><text x="47.6100%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (6 samples, 0.96%)</title><rect x="46.7200%" y="117" width="0.9600%" height="15" fill="rgb(221,10,30)" fg:x="292" fg:w="6"/><text x="46.9700%" y="127.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (1 samples, 0.16%)</title><rect x="47.5200%" y="101" width="0.1600%" height="15" fill="rgb(210,229,1)" fg:x="297" fg:w="1"/><text x="47.7700%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.16%)</title><rect x="47.5200%" y="85" width="0.1600%" height="15" fill="rgb(222,148,37)" fg:x="297" fg:w="1"/><text x="47.7700%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.16%)</title><rect x="47.8400%" y="101" width="0.1600%" height="15" fill="rgb(234,67,33)" fg:x="299" fg:w="1"/><text x="48.0900%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (2 samples, 0.32%)</title><rect x="48.0000%" y="101" width="0.3200%" height="15" fill="rgb(247,98,35)" fg:x="300" fg:w="2"/><text x="48.2500%" y="111.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (7 samples, 1.12%)</title><rect x="47.6800%" y="117" width="1.1200%" height="15" fill="rgb(247,138,52)" fg:x="298" fg:w="7"/><text x="47.9300%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (3 samples, 0.48%)</title><rect x="48.3200%" y="101" width="0.4800%" height="15" fill="rgb(213,79,30)" fg:x="302" fg:w="3"/><text x="48.5700%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (2 samples, 0.32%)</title><rect x="48.9600%" y="101" width="0.3200%" height="15" fill="rgb(246,177,23)" fg:x="306" fg:w="2"/><text x="49.2100%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (19 samples, 3.04%)</title><rect x="46.4000%" y="133" width="3.0400%" height="15" fill="rgb(230,62,27)" fg:x="290" fg:w="19"/><text x="46.6500%" y="143.50">ray..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (4 samples, 0.64%)</title><rect x="48.8000%" y="117" width="0.6400%" height="15" fill="rgb(216,154,8)" fg:x="305" fg:w="4"/><text x="49.0500%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (1 samples, 0.16%)</title><rect x="49.2800%" y="101" width="0.1600%" height="15" fill="rgb(244,35,45)" fg:x="308" fg:w="1"/><text x="49.5300%" y="111.50"></text></g><g><title>raytracer`DYLD-STUB$$memcpy (1 samples, 0.16%)</title><rect x="49.4400%" y="133" width="0.1600%" height="15" fill="rgb(251,115,12)" fg:x="309" fg:w="1"/><text x="49.6900%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.16%)</title><rect x="49.6000%" y="117" width="0.1600%" height="15" fill="rgb(240,54,50)" fg:x="310" fg:w="1"/><text x="49.8500%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (4 samples, 0.64%)</title><rect x="49.7600%" y="117" width="0.6400%" height="15" fill="rgb(233,84,52)" fg:x="311" fg:w="4"/><text x="50.0100%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (3 samples, 0.48%)</title><rect x="50.4000%" y="117" width="0.4800%" height="15" fill="rgb(207,117,47)" fg:x="315" fg:w="3"/><text x="50.6500%" y="127.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (9 samples, 1.44%)</title><rect x="49.6000%" y="133" width="1.4400%" height="15" fill="rgb(249,43,39)" fg:x="310" fg:w="9"/><text x="49.8500%" y="143.50"></text></g><g><title>raytracer`DYLD-STUB$$memcpy (1 samples, 0.16%)</title><rect x="50.8800%" y="117" width="0.1600%" height="15" fill="rgb(209,38,44)" fg:x="318" fg:w="1"/><text x="51.1300%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.48%)</title><rect x="51.2000%" y="117" width="0.4800%" height="15" fill="rgb(236,212,23)" fg:x="320" fg:w="3"/><text x="51.4500%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (59 samples, 9.44%)</title><rect x="43.6800%" y="149" width="9.4400%" height="15" fill="rgb(242,79,21)" fg:x="273" fg:w="59"/><text x="43.9300%" y="159.50">raytracer`&lt;ray..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (13 samples, 2.08%)</title><rect x="51.0400%" y="133" width="2.0800%" height="15" fill="rgb(211,96,35)" fg:x="319" fg:w="13"/><text x="51.2900%" y="143.50">r..</text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (9 samples, 1.44%)</title><rect x="51.6800%" y="117" width="1.4400%" height="15" fill="rgb(253,215,40)" fg:x="323" fg:w="9"/><text x="51.9300%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.64%)</title><rect x="53.2800%" y="133" width="0.6400%" height="15" fill="rgb(211,81,21)" fg:x="333" fg:w="4"/><text x="53.5300%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (9 samples, 1.44%)</title><rect x="53.9200%" y="133" width="1.4400%" height="15" fill="rgb(208,190,38)" fg:x="337" fg:w="9"/><text x="54.1700%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (3 samples, 0.48%)</title><rect x="55.3600%" y="133" width="0.4800%" height="15" fill="rgb(235,213,38)" fg:x="346" fg:w="3"/><text x="55.6100%" y="143.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (18 samples, 2.88%)</title><rect x="53.1200%" y="149" width="2.8800%" height="15" fill="rgb(237,122,38)" fg:x="332" fg:w="18"/><text x="53.3700%" y="159.50">ra..</text></g><g><title>raytracer`core::ptr::drop_in_place&lt;core::option::Option&lt;raytracer_lib::object::intersection::MaterialInformation&gt;&gt; (1 samples, 0.16%)</title><rect x="55.8400%" y="133" width="0.1600%" height="15" fill="rgb(244,218,35)" fg:x="349" fg:w="1"/><text x="56.0900%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.32%)</title><rect x="56.3200%" y="133" width="0.3200%" height="15" fill="rgb(240,68,47)" fg:x="352" fg:w="2"/><text x="56.5700%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (14 samples, 2.24%)</title><rect x="56.6400%" y="133" width="2.2400%" height="15" fill="rgb(210,16,53)" fg:x="354" fg:w="14"/><text x="56.8900%" y="143.50">r..</text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (120 samples, 19.20%)</title><rect x="40.1600%" y="165" width="19.2000%" height="15" fill="rgb(235,124,12)" fg:x="251" fg:w="120"/><text x="40.4100%" y="175.50">raytracer`&lt;raytracer_lib::shad..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (21 samples, 3.36%)</title><rect x="56.0000%" y="149" width="3.3600%" height="15" fill="rgb(224,169,11)" fg:x="350" fg:w="21"/><text x="56.2500%" y="159.50">ray..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (3 samples, 0.48%)</title><rect x="58.8800%" y="133" width="0.4800%" height="15" fill="rgb(250,166,2)" fg:x="368" fg:w="3"/><text x="59.1300%" y="143.50"></text></g><g><title>raytracer`DYLD-STUB$$memcpy (2 samples, 0.32%)</title><rect x="59.3600%" y="165" width="0.3200%" height="15" fill="rgb(242,216,29)" fg:x="371" fg:w="2"/><text x="59.6100%" y="175.50"></text></g><g><title>raytracer`core::ptr::drop_in_place&lt;core::option::Option&lt;raytracer_lib::object::intersection::MaterialInformation&gt;&gt; (1 samples, 0.16%)</title><rect x="59.6800%" y="165" width="0.1600%" height="15" fill="rgb(230,116,27)" fg:x="373" fg:w="1"/><text x="59.9300%" y="175.50"></text></g><g><title>raytracer`rand::rngs::thread::thread_rng (1 samples, 0.16%)</title><rect x="59.8400%" y="165" width="0.1600%" height="15" fill="rgb(228,99,48)" fg:x="374" fg:w="1"/><text x="60.0900%" y="175.50"></text></g><g><title>raytracer`rand::seq::IteratorRandom::choose (1 samples, 0.16%)</title><rect x="60.0000%" y="165" width="0.1600%" height="15" fill="rgb(253,11,6)" fg:x="375" fg:w="1"/><text x="60.2500%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 1.12%)</title><rect x="61.9200%" y="149" width="1.1200%" height="15" fill="rgb(247,143,39)" fg:x="387" fg:w="7"/><text x="62.1700%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (28 samples, 4.48%)</title><rect x="63.0400%" y="149" width="4.4800%" height="15" fill="rgb(236,97,10)" fg:x="394" fg:w="28"/><text x="63.2900%" y="159.50">raytr..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (58 samples, 9.28%)</title><rect x="60.1600%" y="165" width="9.2800%" height="15" fill="rgb(233,208,19)" fg:x="376" fg:w="58"/><text x="60.4100%" y="175.50">raytracer`ray..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (12 samples, 1.92%)</title><rect x="67.5200%" y="149" width="1.9200%" height="15" fill="rgb(216,164,2)" fg:x="422" fg:w="12"/><text x="67.7700%" y="159.50">r..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.96%)</title><rect x="69.4400%" y="149" width="0.9600%" height="15" fill="rgb(220,129,5)" fg:x="434" fg:w="6"/><text x="69.6900%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (17 samples, 2.72%)</title><rect x="70.4000%" y="149" width="2.7200%" height="15" fill="rgb(242,17,10)" fg:x="440" fg:w="17"/><text x="70.6500%" y="159.50">ra..</text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (254 samples, 40.64%)</title><rect x="33.6000%" y="181" width="40.6400%" height="15" fill="rgb(242,107,0)" fg:x="210" fg:w="254"/><text x="33.8500%" y="191.50">raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathT..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (30 samples, 4.80%)</title><rect x="69.4400%" y="165" width="4.8000%" height="15" fill="rgb(251,28,31)" fg:x="434" fg:w="30"/><text x="69.6900%" y="175.50">raytra..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (7 samples, 1.12%)</title><rect x="73.1200%" y="149" width="1.1200%" height="15" fill="rgb(233,223,10)" fg:x="457" fg:w="7"/><text x="73.3700%" y="159.50"></text></g><g><title>raytracer`DYLD-STUB$$memcpy (2 samples, 0.32%)</title><rect x="74.2400%" y="181" width="0.3200%" height="15" fill="rgb(215,21,27)" fg:x="464" fg:w="2"/><text x="74.4900%" y="191.50"></text></g><g><title>raytracer`core::ptr::drop_in_place&lt;raytracer_lib::object::intersection::Intersection&gt; (1 samples, 0.16%)</title><rect x="74.5600%" y="181" width="0.1600%" height="15" fill="rgb(232,23,21)" fg:x="466" fg:w="1"/><text x="74.8100%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="76.0000%" y="165" width="0.1600%" height="15" fill="rgb(244,5,23)" fg:x="475" fg:w="1"/><text x="76.2500%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 1.28%)</title><rect x="76.1600%" y="165" width="1.2800%" height="15" fill="rgb(226,81,46)" fg:x="476" fg:w="8"/><text x="76.4100%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (18 samples, 2.88%)</title><rect x="77.4400%" y="165" width="2.8800%" height="15" fill="rgb(247,70,30)" fg:x="484" fg:w="18"/><text x="77.6900%" y="175.50">ra..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (47 samples, 7.52%)</title><rect x="74.7200%" y="181" width="7.5200%" height="15" fill="rgb(212,68,19)" fg:x="467" fg:w="47"/><text x="74.9700%" y="191.50">raytracer`..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (12 samples, 1.92%)</title><rect x="80.3200%" y="165" width="1.9200%" height="15" fill="rgb(240,187,13)" fg:x="502" fg:w="12"/><text x="80.5700%" y="175.50">r..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 1.60%)</title><rect x="82.2400%" y="165" width="1.6000%" height="15" fill="rgb(223,113,26)" fg:x="514" fg:w="10"/><text x="82.4900%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (6 samples, 0.96%)</title><rect x="83.8400%" y="165" width="0.9600%" height="15" fill="rgb(206,192,2)" fg:x="524" fg:w="6"/><text x="84.0900%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader&gt;::shade (392 samples, 62.72%)</title><rect x="23.2000%" y="197" width="62.7200%" height="15" fill="rgb(241,108,4)" fg:x="145" fg:w="392"/><text x="23.4500%" y="207.50">raytracer`&lt;raytracer_lib::shader::better_path_tracer_shader::PathTracer as raytracer_lib::shader::Shader..</text></g><g><title>raytracer`raytracer_lib::scene::Scene::visibility (23 samples, 3.68%)</title><rect x="82.2400%" y="181" width="3.6800%" height="15" fill="rgb(247,173,49)" fg:x="514" fg:w="23"/><text x="82.4900%" y="191.50">rayt..</text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (7 samples, 1.12%)</title><rect x="84.8000%" y="165" width="1.1200%" height="15" fill="rgb(224,114,35)" fg:x="530" fg:w="7"/><text x="85.0500%" y="175.50"></text></g><g><title>raytracer`DYLD-STUB$$free (1 samples, 0.16%)</title><rect x="85.9200%" y="197" width="0.1600%" height="15" fill="rgb(245,159,27)" fg:x="537" fg:w="1"/><text x="86.1700%" y="207.50"></text></g><g><title>raytracer`DYLD-STUB$$memcpy (1 samples, 0.16%)</title><rect x="86.0800%" y="197" width="0.1600%" height="15" fill="rgb(245,172,44)" fg:x="538" fg:w="1"/><text x="86.3300%" y="207.50"></text></g><g><title>raytracer`core::ptr::drop_in_place&lt;core::option::Option&lt;raytracer_lib::object::intersection::Intersection&gt;&gt; (2 samples, 0.32%)</title><rect x="86.2400%" y="197" width="0.3200%" height="15" fill="rgb(236,23,11)" fg:x="539" fg:w="2"/><text x="86.4900%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.16%)</title><rect x="86.4000%" y="181" width="0.1600%" height="15" fill="rgb(205,117,38)" fg:x="540" fg:w="1"/><text x="86.6500%" y="191.50"></text></g><g><title>raytracer`rand::rngs::thread::thread_rng (2 samples, 0.32%)</title><rect x="86.5600%" y="197" width="0.3200%" height="15" fill="rgb(237,72,25)" fg:x="541" fg:w="2"/><text x="86.8100%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.16%)</title><rect x="89.6000%" y="181" width="0.1600%" height="15" fill="rgb(244,70,9)" fg:x="560" fg:w="1"/><text x="89.8500%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 1.92%)</title><rect x="89.7600%" y="181" width="1.9200%" height="15" fill="rgb(217,125,39)" fg:x="561" fg:w="12"/><text x="90.0100%" y="191.50">l..</text></g><g><title>raytracer`&lt;raytracer_lib::object::face::Face as raytracer_lib::object::intersection::Intersectable&gt;::intersect (10 samples, 1.60%)</title><rect x="91.6800%" y="181" width="1.6000%" height="15" fill="rgb(235,36,10)" fg:x="573" fg:w="10"/><text x="91.9300%" y="191.50"></text></g><g><title>raytracer`&lt;raytracer_lib::object::mesh::Mesh as raytracer_lib::object::intersection::Intersectable&gt;::intersect (35 samples, 5.60%)</title><rect x="93.2800%" y="181" width="5.6000%" height="15" fill="rgb(251,123,47)" fg:x="583" fg:w="35"/><text x="93.5300%" y="191.50">raytrac..</text></g><g><title>raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (585 samples, 93.60%)</title><rect x="5.4400%" y="213" width="93.6000%" height="15" fill="rgb(221,13,13)" fg:x="34" fg:w="585"/><text x="5.6900%" y="223.50">raytracer`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (76 samples, 12.16%)</title><rect x="86.8800%" y="197" width="12.1600%" height="15" fill="rgb(238,131,9)" fg:x="543" fg:w="76"/><text x="87.1300%" y="207.50">raytracer`raytrace..</text></g><g><title>raytracer`core::ptr::drop_in_place&lt;core::option::Option&lt;raytracer_lib::object::intersection::MaterialInformation&gt;&gt; (1 samples, 0.16%)</title><rect x="98.8800%" y="181" width="0.1600%" height="15" fill="rgb(211,50,8)" fg:x="618" fg:w="1"/><text x="99.1300%" y="191.50"></text></g><g><title>raytracer`indicatif::progress_bar::ProgressBar::tick_inner (1 samples, 0.16%)</title><rect x="99.0400%" y="213" width="0.1600%" height="15" fill="rgb(245,182,24)" fg:x="619" fg:w="1"/><text x="99.2900%" y="223.50"></text></g><g><title>raytracer`indicatif::state::BarState::update_estimate_and_draw (1 samples, 0.16%)</title><rect x="99.0400%" y="197" width="0.1600%" height="15" fill="rgb(242,14,37)" fg:x="619" fg:w="1"/><text x="99.2900%" y="207.50"></text></g><g><title>raytracer`indicatif::state::BarState::draw (1 samples, 0.16%)</title><rect x="99.0400%" y="181" width="0.1600%" height="15" fill="rgb(246,228,12)" fg:x="619" fg:w="1"/><text x="99.2900%" y="191.50"></text></g><g><title>raytracer`indicatif::draw_target::Drawable::draw (1 samples, 0.16%)</title><rect x="99.0400%" y="165" width="0.1600%" height="15" fill="rgb(213,55,15)" fg:x="619" fg:w="1"/><text x="99.2900%" y="175.50"></text></g><g><title>raytracer`console::unix_term::terminal_size (1 samples, 0.16%)</title><rect x="99.0400%" y="149" width="0.1600%" height="15" fill="rgb(209,9,3)" fg:x="619" fg:w="1"/><text x="99.2900%" y="159.50"></text></g><g><title>libsystem_c.dylib`isatty (1 samples, 0.16%)</title><rect x="99.0400%" y="133" width="0.1600%" height="15" fill="rgb(230,59,30)" fg:x="619" fg:w="1"/><text x="99.2900%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (1 samples, 0.16%)</title><rect x="99.0400%" y="117" width="0.1600%" height="15" fill="rgb(209,121,21)" fg:x="619" fg:w="1"/><text x="99.2900%" y="127.50"></text></g><g><title>raytracer`raytracer_lib::raytracer::RayTracer::render (623 samples, 99.68%)</title><rect x="0.0000%" y="277" width="99.6800%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="623"/><text x="0.2500%" y="287.50">raytracer`raytracer_lib::raytracer::RayTracer::render</text></g><g><title>raytracer`raytracer_lib::renderer::Renderer::render (619 samples, 99.04%)</title><rect x="0.6400%" y="261" width="99.0400%" height="15" fill="rgb(232,18,1)" fg:x="4" fg:w="619"/><text x="0.8900%" y="271.50">raytracer`raytracer_lib::renderer::Renderer::render</text></g><g><title>raytracer`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (619 samples, 99.04%)</title><rect x="0.6400%" y="245" width="99.0400%" height="15" fill="rgb(215,41,42)" fg:x="4" fg:w="619"/><text x="0.8900%" y="255.50">raytracer`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>raytracer`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (616 samples, 98.56%)</title><rect x="1.1200%" y="229" width="98.5600%" height="15" fill="rgb(224,123,36)" fg:x="7" fg:w="616"/><text x="1.3700%" y="239.50">raytracer`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>raytracer`raytracer_lib::scene::Scene::trace (3 samples, 0.48%)</title><rect x="99.2000%" y="213" width="0.4800%" height="15" fill="rgb(240,125,3)" fg:x="620" fg:w="3"/><text x="99.4500%" y="223.50"></text></g><g><title>dyld`start (624 samples, 99.84%)</title><rect x="0.0000%" y="389" width="99.8400%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="624"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>raytracer`main (624 samples, 99.84%)</title><rect x="0.0000%" y="373" width="99.8400%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="624"/><text x="0.2500%" y="383.50">raytracer`main</text></g><g><title>raytracer`std::rt::lang_start_internal (624 samples, 99.84%)</title><rect x="0.0000%" y="357" width="99.8400%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="624"/><text x="0.2500%" y="367.50">raytracer`std::rt::lang_start_internal</text></g><g><title>raytracer`std::panicking::try (624 samples, 99.84%)</title><rect x="0.0000%" y="341" width="99.8400%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="624"/><text x="0.2500%" y="351.50">raytracer`std::panicking::try</text></g><g><title>raytracer`std::rt::lang_start::_{{closure}} (624 samples, 99.84%)</title><rect x="0.0000%" y="325" width="99.8400%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="624"/><text x="0.2500%" y="335.50">raytracer`std::rt::lang_start::_{{closure}}</text></g><g><title>raytracer`std::sys_common::backtrace::__rust_begin_short_backtrace (624 samples, 99.84%)</title><rect x="0.0000%" y="309" width="99.8400%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="624"/><text x="0.2500%" y="319.50">raytracer`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>raytracer`raytracer::main (624 samples, 99.84%)</title><rect x="0.0000%" y="293" width="99.8400%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="624"/><text x="0.2500%" y="303.50">raytracer`raytracer::main</text></g><g><title>raytracer`raytracer_lib::raytracer::RayTracer::with_configuration (1 samples, 0.16%)</title><rect x="99.6800%" y="277" width="0.1600%" height="15" fill="rgb(243,32,47)" fg:x="623" fg:w="1"/><text x="99.9300%" y="287.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::with_camera_args (1 samples, 0.16%)</title><rect x="99.6800%" y="261" width="0.1600%" height="15" fill="rgb(247,202,23)" fg:x="623" fg:w="1"/><text x="99.9300%" y="271.50"></text></g><g><title>raytracer`raytracer_lib::scene::Scene::load_obj (1 samples, 0.16%)</title><rect x="99.6800%" y="245" width="0.1600%" height="15" fill="rgb(219,102,11)" fg:x="623" fg:w="1"/><text x="99.9300%" y="255.50"></text></g><g><title>raytracer`tobj::load_obj (1 samples, 0.16%)</title><rect x="99.6800%" y="229" width="0.1600%" height="15" fill="rgb(243,110,44)" fg:x="623" fg:w="1"/><text x="99.9300%" y="239.50"></text></g><g><title>raytracer`tobj::load_obj::_{{closure}} (1 samples, 0.16%)</title><rect x="99.6800%" y="213" width="0.1600%" height="15" fill="rgb(222,74,54)" fg:x="623" fg:w="1"/><text x="99.9300%" y="223.50"></text></g><g><title>raytracer`std::fs::OpenOptions::_open (1 samples, 0.16%)</title><rect x="99.6800%" y="197" width="0.1600%" height="15" fill="rgb(216,99,12)" fg:x="623" fg:w="1"/><text x="99.9300%" y="207.50"></text></g><g><title>raytracer`std::sys::pal::unix::fs::File::open_c (1 samples, 0.16%)</title><rect x="99.6800%" y="181" width="0.1600%" height="15" fill="rgb(226,22,26)" fg:x="623" fg:w="1"/><text x="99.9300%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.16%)</title><rect x="99.6800%" y="165" width="0.1600%" height="15" fill="rgb(217,163,10)" fg:x="623" fg:w="1"/><text x="99.9300%" y="175.50"></text></g><g><title>all (625 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="625"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.16%)</title><rect x="99.8400%" y="389" width="0.1600%" height="15" fill="rgb(252,105,26)" fg:x="624" fg:w="1"/><text x="100.0900%" y="399.50"></text></g></svg></svg>